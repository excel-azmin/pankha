{"version":3,"sources":["../../../../../src/modules/auth/command/verification/verify-registration-handler.ts"],"sourcesContent":["import { CommandHandler, ICommandHandler } from '@nestjs/cqrs';\nimport { USER_REGISTRATION_CACHE_PREFIX } from 'src/common/constants/redis-cache-prefix-constants';\nimport { JsonWebTokenService } from 'src/common/lib/jwt-token/jsonwebtoken.service';\nimport { RedisCacheService } from 'src/common/shared/cache/redis-cache.service';\nimport { UserService } from 'src/modules/user/service/user.service';\nimport { VerifyRegistrationCommand } from './verify-registration-command';\n\n@CommandHandler(VerifyRegistrationCommand)\nexport class VerifyRegistrationHandler\n  implements ICommandHandler<VerifyRegistrationCommand>\n{\n  constructor(\n    private readonly jsonWebTokenService: JsonWebTokenService,\n    private readonly redisCacheService: RedisCacheService,\n    private readonly userService: UserService,\n  ) {}\n  async execute(command: VerifyRegistrationCommand): Promise<any> {\n    try {\n      const { email } = command.user;\n      const { otp } = command.verifyRegistrationAuthDto;\n      const getVerifyingUser = await this.redisCacheService.getCacheValue(\n        USER_REGISTRATION_CACHE_PREFIX,\n        email,\n      );\n      if (!getVerifyingUser) {\n        return {\n          message: 'The registration process time has expired.',\n          statusCode: 404,\n        };\n      }\n      if (getVerifyingUser.otp !== otp) {\n        return {\n          message: 'Invalid OTP provided.',\n          statusCode: 400,\n        };\n      }\n\n      const user = await this.userService.createUser(getVerifyingUser);\n\n      const [access_token, refreshToken] = await Promise.all([\n        this.jsonWebTokenService.loginToken(getVerifyingUser),\n        this.jsonWebTokenService.generateRefreshToken(getVerifyingUser),\n      ]);\n\n      return {\n        message: 'OTP verified successfully. User registered.',\n        statusCode: 200,\n        access_token,\n        refreshToken,\n        user,\n      };\n    } catch (error) {\n      return error;\n    }\n  }\n}\n"],"names":["VerifyRegistrationHandler","execute","command","email","user","otp","verifyRegistrationAuthDto","getVerifyingUser","redisCacheService","getCacheValue","USER_REGISTRATION_CACHE_PREFIX","message","statusCode","userService","createUser","access_token","refreshToken","Promise","all","jsonWebTokenService","loginToken","generateRefreshToken","error","constructor"],"mappings":";;;;+BAQaA;;;eAAAA;;;sBARmC;2CACD;qCACX;mCACF;6BACN;2CACc;;;;;;;;;;AAGnC,IAAA,AAAMA,4BAAN,MAAMA;IAQX,MAAMC,QAAQC,OAAkC,EAAgB;QAC9D,IAAI;YACF,MAAM,EAAEC,KAAK,EAAE,GAAGD,QAAQE,IAAI;YAC9B,MAAM,EAAEC,GAAG,EAAE,GAAGH,QAAQI,yBAAyB;YACjD,MAAMC,mBAAmB,MAAM,IAAI,CAACC,iBAAiB,CAACC,aAAa,CACjEC,yDAA8B,EAC9BP;YAEF,IAAI,CAACI,kBAAkB;gBACrB,OAAO;oBACLI,SAAS;oBACTC,YAAY;gBACd;YACF;YACA,IAAIL,iBAAiBF,GAAG,KAAKA,KAAK;gBAChC,OAAO;oBACLM,SAAS;oBACTC,YAAY;gBACd;YACF;YAEA,MAAMR,OAAO,MAAM,IAAI,CAACS,WAAW,CAACC,UAAU,CAACP;YAE/C,MAAM,CAACQ,cAAcC,aAAa,GAAG,MAAMC,QAAQC,GAAG,CAAC;gBACrD,IAAI,CAACC,mBAAmB,CAACC,UAAU,CAACb;gBACpC,IAAI,CAACY,mBAAmB,CAACE,oBAAoB,CAACd;aAC/C;YAED,OAAO;gBACLI,SAAS;gBACTC,YAAY;gBACZG;gBACAC;gBACAZ;YACF;QACF,EAAE,OAAOkB,OAAO;YACd,OAAOA;QACT;IACF;IA3CAC,YACE,AAAiBJ,mBAAwC,EACzD,AAAiBX,iBAAoC,EACrD,AAAiBK,WAAwB,CACzC;aAHiBM,sBAAAA;aACAX,oBAAAA;aACAK,cAAAA;IAChB;AAwCL"}