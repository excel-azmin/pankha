{"version":3,"sources":["../../../../src/modules/auth/controller/auth.controller.ts"],"sourcesContent":["import { Body, Controller, Post, Req, UseGuards } from '@nestjs/common';\nimport { CommandBus, QueryBus } from '@nestjs/cqrs';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { OTPVerifyAuthGuard } from 'src/common/shared/guards/verify-auth.guard';\nimport { RequestWithOTP } from 'src/common/shared/interface/response';\nimport { LoginCommand } from '../command/login-command';\nimport { RegistrationCommand } from '../command/registation-command';\nimport { VerifyRegistrationCommand } from '../command/verify-registation-command';\nimport { LoginAuthDto } from '../dto/login-auth.dto';\nimport { RegistrationAuthDto } from '../dto/registration-auth.dto';\nimport { VerifyRegistrationAuthDto } from '../dto/verify-registration-auth.dto';\n\n@Controller('auth')\n@ApiTags('Authentication and Authorization')\nexport class AuthController {\n  constructor(\n    private readonly commandBus: CommandBus,\n    private readonly queryBus: QueryBus,\n    private readonly clerk,\n  ) {}\n\n  @Post('v1/clerk')\n  async authClerk() {\n    return 'authClerk';\n  }\n\n  @Post('v1/registration')\n  async authRegistration(@Body() registrationAuthDto: RegistrationAuthDto) {\n    return await this.commandBus.execute(\n      new RegistrationCommand(registrationAuthDto),\n    );\n  }\n\n  @Post('v1/registration/verify')\n  @ApiBearerAuth()\n  @UseGuards(OTPVerifyAuthGuard)\n  async authRegistrationVerify(\n    @Body() verifyRegistrationAuthDto: VerifyRegistrationAuthDto,\n    @Req() req: RequestWithOTP,\n  ) {\n    return await this.commandBus.execute(\n      new VerifyRegistrationCommand(verifyRegistrationAuthDto, req.user),\n    );\n  }\n\n  @Post('v1/login')\n  async authLogin(@Body() loginAuthDto: LoginAuthDto) {\n    return await this.commandBus.execute(new LoginCommand(loginAuthDto));\n  }\n\n  // @Post('logout')\n  // authLogout(@Body() createAuthDto: CreateAuthDto) {\n  //   return this.authService.create(createAuthDto);\n  // }\n\n  // @Post('refresh-token')\n  // authRefreshToken(@Body() createAuthDto: CreateAuthDto) {\n  //   return this.authService.create(createAuthDto);\n  // }\n  // @Post('forgot-password')\n  // authForgotPassword(@Body() createAuthDto: CreateAuthDto) {\n  //   return this.authService.create(createAuthDto);\n  // }\n  // @Post('reset-password')\n  // authResetPassword(@Body() createAuthDto: CreateAuthDto) {\n  //   return this.authService.create(createAuthDto);\n  // }\n\n  // @Get('me')\n  // authMe(@Body() createAuthDto: CreateAuthDto) {\n  //   return this.authService.create(createAuthDto);\n  // }\n}\n"],"names":["AuthController","authClerk","authRegistration","registrationAuthDto","commandBus","execute","RegistrationCommand","authRegistrationVerify","verifyRegistrationAuthDto","req","VerifyRegistrationCommand","user","authLogin","loginAuthDto","LoginCommand","constructor","queryBus","clerk"],"mappings":";;;;+BAcaA;;;eAAAA;;;wBAd0C;sBAClB;yBACE;iCACJ;0BACJ;8BACF;oCACO;0CACM;8BACb;qCACO;2CACM;;;;;;;;;;;;;;;AAInC,IAAA,AAAMA,iBAAN,MAAMA;IAOX,MACMC,YAAY;QAChB,OAAO;IACT;IAEA,MACMC,iBAAiB,AAAQC,mBAAwC,EAAE;QACvE,OAAO,MAAM,IAAI,CAACC,UAAU,CAACC,OAAO,CAClC,IAAIC,uCAAmB,CAACH;IAE5B;IAEA,MAGMI,uBACJ,AAAQC,yBAAoD,EAC5D,AAAOC,GAAmB,EAC1B;QACA,OAAO,MAAM,IAAI,CAACL,UAAU,CAACC,OAAO,CAClC,IAAIK,mDAAyB,CAACF,2BAA2BC,IAAIE,IAAI;IAErE;IAEA,MACMC,UAAU,AAAQC,YAA0B,EAAE;QAClD,OAAO,MAAM,IAAI,CAACT,UAAU,CAACC,OAAO,CAAC,IAAIS,0BAAY,CAACD;IACxD;IAjCAE,YACE,AAAiBX,UAAsB,EACvC,AAAiBY,QAAkB,EACnC,AAAiBC,KAAK,CACtB;aAHiBb,aAAAA;aACAY,WAAAA;aACAC,QAAAA;IAChB;AAqDL"}