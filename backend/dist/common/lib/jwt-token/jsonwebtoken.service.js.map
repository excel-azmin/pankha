{"version":3,"sources":["../../../../src/common/lib/jwt-token/jsonwebtoken.service.ts"],"sourcesContent":["import { Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport type { Algorithm } from 'jsonwebtoken';\n\nimport {\n  EnvConfigService,\n  JWT_ALGORITHM,\n  LOGIN_EXPIRES_IN,\n  LOGIN_SECRET,\n  REFRESH_EXPIRES_IN,\n  REFRESH_SECRET,\n  WEBHOOK_SECRET,\n} from 'src/common/config/env/env-config.service';\nimport {\n  LoginTokenPayload,\n  RefreshTokenPayload,\n  RegistrationTokenPayloadSchema,\n} from './types';\n\n@Injectable()\nexport class JsonWebTokenService {\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly configService: EnvConfigService,\n  ) {}\n\n  async generateRegisterToken(payload: RegistrationTokenPayloadSchema) {\n    const secret = this.configService.get(LOGIN_SECRET);\n    const expiresIn = this.configService.get(LOGIN_EXPIRES_IN);\n    const algorithm = this.configService.get(JWT_ALGORITHM) as Algorithm;\n    return this.jwtService.sign(payload, { secret, expiresIn, algorithm });\n  }\n\n  async loginToken(payload: LoginTokenPayload) {\n    const secret = this.configService.get(LOGIN_SECRET);\n    const expiresIn = this.configService.get(LOGIN_EXPIRES_IN);\n    const algorithm = this.configService.get(JWT_ALGORITHM) as Algorithm;\n    return this.jwtService.sign(payload, { secret, expiresIn, algorithm });\n  }\n\n  async verifyLoginToken<T extends object>(token: string): Promise<T> {\n    try {\n      const secret = this.configService.get(LOGIN_SECRET);\n      const payload = await this.jwtService.verifyAsync<T>(token, { secret });\n      return payload;\n    } catch (error) {\n      console.log(error);\n      return null;\n    }\n  }\n\n  async generateRefreshToken(email: string) {\n    const secret = this.configService.get(REFRESH_SECRET);\n    const expiresIn = this.configService.get(REFRESH_EXPIRES_IN);\n    const algorithm = this.configService.get(JWT_ALGORITHM) as Algorithm;\n    const payload: RefreshTokenPayload = { email };\n    return this.jwtService.sign(payload, { secret, expiresIn, algorithm });\n  }\n\n  async verifyRefreshToken(token: string) {\n    try {\n      const secret = this.configService.get(REFRESH_SECRET);\n      const payload = await this.jwtService.verifyAsync<RefreshTokenPayload>(\n        token,\n        { secret },\n      );\n      return payload;\n    } catch (error) {\n      console.log(error);\n      return null;\n    }\n  }\n\n  async generateWebhookToken(payload: Record<string, string>) {\n    const secret = this.configService.get(WEBHOOK_SECRET);\n    const algorithm = this.configService.get(JWT_ALGORITHM) as Algorithm;\n    return this.jwtService.sign(payload, { secret, algorithm });\n  }\n\n  async verifyWebhookToken(token: string) {\n    try {\n      const secret = this.configService.get(WEBHOOK_SECRET);\n      const payload = await this.jwtService.verifyAsync<Record<string, string>>(\n        token,\n        { secret },\n      );\n      return payload;\n    } catch (error) {\n      console.log(error);\n      return null;\n    }\n  }\n}\n"],"names":["JsonWebTokenService","generateRegisterToken","payload","secret","configService","get","LOGIN_SECRET","expiresIn","LOGIN_EXPIRES_IN","algorithm","JWT_ALGORITHM","jwtService","sign","loginToken","verifyLoginToken","token","verifyAsync","error","console","log","generateRefreshToken","email","REFRESH_SECRET","REFRESH_EXPIRES_IN","verifyRefreshToken","generateWebhookToken","WEBHOOK_SECRET","verifyWebhookToken","constructor"],"mappings":";;;;+BAoBaA;;;eAAAA;;;wBApBc;qBACA;kCAWpB;;;;;;;;;;AAQA,IAAA,AAAMA,sBAAN,MAAMA;IAMX,MAAMC,sBAAsBC,OAAuC,EAAE;QACnE,MAAMC,SAAS,IAAI,CAACC,aAAa,CAACC,GAAG,CAACC,8BAAY;QAClD,MAAMC,YAAY,IAAI,CAACH,aAAa,CAACC,GAAG,CAACG,kCAAgB;QACzD,MAAMC,YAAY,IAAI,CAACL,aAAa,CAACC,GAAG,CAACK,+BAAa;QACtD,OAAO,IAAI,CAACC,UAAU,CAACC,IAAI,CAACV,SAAS;YAAEC;YAAQI;YAAWE;QAAU;IACtE;IAEA,MAAMI,WAAWX,OAA0B,EAAE;QAC3C,MAAMC,SAAS,IAAI,CAACC,aAAa,CAACC,GAAG,CAACC,8BAAY;QAClD,MAAMC,YAAY,IAAI,CAACH,aAAa,CAACC,GAAG,CAACG,kCAAgB;QACzD,MAAMC,YAAY,IAAI,CAACL,aAAa,CAACC,GAAG,CAACK,+BAAa;QACtD,OAAO,IAAI,CAACC,UAAU,CAACC,IAAI,CAACV,SAAS;YAAEC;YAAQI;YAAWE;QAAU;IACtE;IAEA,MAAMK,iBAAmCC,KAAa,EAAc;QAClE,IAAI;YACF,MAAMZ,SAAS,IAAI,CAACC,aAAa,CAACC,GAAG,CAACC,8BAAY;YAClD,MAAMJ,UAAU,MAAM,IAAI,CAACS,UAAU,CAACK,WAAW,CAAID,OAAO;gBAAEZ;YAAO;YACrE,OAAOD;QACT,EAAE,OAAOe,OAAO;YACdC,QAAQC,GAAG,CAACF;YACZ,OAAO;QACT;IACF;IAEA,MAAMG,qBAAqBC,KAAa,EAAE;QACxC,MAAMlB,SAAS,IAAI,CAACC,aAAa,CAACC,GAAG,CAACiB,gCAAc;QACpD,MAAMf,YAAY,IAAI,CAACH,aAAa,CAACC,GAAG,CAACkB,oCAAkB;QAC3D,MAAMd,YAAY,IAAI,CAACL,aAAa,CAACC,GAAG,CAACK,+BAAa;QACtD,MAAMR,UAA+B;YAAEmB;QAAM;QAC7C,OAAO,IAAI,CAACV,UAAU,CAACC,IAAI,CAACV,SAAS;YAAEC;YAAQI;YAAWE;QAAU;IACtE;IAEA,MAAMe,mBAAmBT,KAAa,EAAE;QACtC,IAAI;YACF,MAAMZ,SAAS,IAAI,CAACC,aAAa,CAACC,GAAG,CAACiB,gCAAc;YACpD,MAAMpB,UAAU,MAAM,IAAI,CAACS,UAAU,CAACK,WAAW,CAC/CD,OACA;gBAAEZ;YAAO;YAEX,OAAOD;QACT,EAAE,OAAOe,OAAO;YACdC,QAAQC,GAAG,CAACF;YACZ,OAAO;QACT;IACF;IAEA,MAAMQ,qBAAqBvB,OAA+B,EAAE;QAC1D,MAAMC,SAAS,IAAI,CAACC,aAAa,CAACC,GAAG,CAACqB,gCAAc;QACpD,MAAMjB,YAAY,IAAI,CAACL,aAAa,CAACC,GAAG,CAACK,+BAAa;QACtD,OAAO,IAAI,CAACC,UAAU,CAACC,IAAI,CAACV,SAAS;YAAEC;YAAQM;QAAU;IAC3D;IAEA,MAAMkB,mBAAmBZ,KAAa,EAAE;QACtC,IAAI;YACF,MAAMZ,SAAS,IAAI,CAACC,aAAa,CAACC,GAAG,CAACqB,gCAAc;YACpD,MAAMxB,UAAU,MAAM,IAAI,CAACS,UAAU,CAACK,WAAW,CAC/CD,OACA;gBAAEZ;YAAO;YAEX,OAAOD;QACT,EAAE,OAAOe,OAAO;YACdC,QAAQC,GAAG,CAACF;YACZ,OAAO;QACT;IACF;IAtEAW,YACE,AAAiBjB,UAAsB,EACvC,AAAiBP,aAA+B,CAChD;aAFiBO,aAAAA;aACAP,gBAAAA;IAChB;AAoEL"}