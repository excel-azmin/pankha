{"version":3,"sources":["../../../../src/common/lib/pipe/notification-validation.pipe.ts"],"sourcesContent":["import { BadRequestException, Injectable, PipeTransform } from '@nestjs/common';\n\n@Injectable()\nexport class NotificationValidationPipe implements PipeTransform {\n  async transform(value: any) {\n    const { notificationType } = value;\n\n    let validationErrors: any[] = [];\n\n    if (notificationType === 'PUSH') {\n      // Validate required fields for PUSH notification\n      const requiredFieldsForPush = [\n        'senderId',\n        'pushTokens',\n        'title',\n        'message',\n      ];\n      validationErrors = this.validateFields(value, requiredFieldsForPush);\n    } else {\n      // Validate required fields for non-PUSH notification\n      const requiredFieldsForNonPush = [\n        'senderId',\n        'fullName',\n        'title',\n        'message',\n      ];\n      validationErrors = this.validateFields(value, requiredFieldsForNonPush);\n    }\n\n    if (validationErrors.length > 0) {\n      // Format errors as a string or object for the BadRequestException\n      const errorMessages = validationErrors\n        .map((error) => `${error.field}: ${error.message}`)\n        .join(', ');\n      throw new BadRequestException(`Validation failed: ${errorMessages}`);\n    }\n\n    return value;\n  }\n\n  private validateFields(value: any, requiredFields: string[]) {\n    const errors: any[] = [];\n    requiredFields.forEach((field) => {\n      if (!value[field]) {\n        errors.push({\n          field,\n          message: `${field} is required`,\n        });\n      }\n    });\n    return errors;\n  }\n}\n"],"names":["NotificationValidationPipe","transform","value","notificationType","validationErrors","requiredFieldsForPush","validateFields","requiredFieldsForNonPush","length","errorMessages","map","error","field","message","join","BadRequestException","requiredFields","errors","forEach","push"],"mappings":";;;;+BAGaA;;;eAAAA;;;wBAHkD;;;;;;;AAGxD,IAAA,AAAMA,6BAAN,MAAMA;IACX,MAAMC,UAAUC,KAAU,EAAE;QAC1B,MAAM,EAAEC,gBAAgB,EAAE,GAAGD;QAE7B,IAAIE,mBAA0B,EAAE;QAEhC,IAAID,qBAAqB,QAAQ;YAC/B,iDAAiD;YACjD,MAAME,wBAAwB;gBAC5B;gBACA;gBACA;gBACA;aACD;YACDD,mBAAmB,IAAI,CAACE,cAAc,CAACJ,OAAOG;QAChD,OAAO;YACL,qDAAqD;YACrD,MAAME,2BAA2B;gBAC/B;gBACA;gBACA;gBACA;aACD;YACDH,mBAAmB,IAAI,CAACE,cAAc,CAACJ,OAAOK;QAChD;QAEA,IAAIH,iBAAiBI,MAAM,GAAG,GAAG;YAC/B,kEAAkE;YAClE,MAAMC,gBAAgBL,iBACnBM,GAAG,CAAC,CAACC,QAAU,GAAGA,MAAMC,KAAK,CAAC,EAAE,EAAED,MAAME,OAAO,EAAE,EACjDC,IAAI,CAAC;YACR,MAAM,IAAIC,2BAAmB,CAAC,CAAC,mBAAmB,EAAEN,eAAe;QACrE;QAEA,OAAOP;IACT;IAEQI,eAAeJ,KAAU,EAAEc,cAAwB,EAAE;QAC3D,MAAMC,SAAgB,EAAE;QACxBD,eAAeE,OAAO,CAAC,CAACN;YACtB,IAAI,CAACV,KAAK,CAACU,MAAM,EAAE;gBACjBK,OAAOE,IAAI,CAAC;oBACVP;oBACAC,SAAS,GAAGD,MAAM,YAAY,CAAC;gBACjC;YACF;QACF;QACA,OAAOK;IACT;AACF"}