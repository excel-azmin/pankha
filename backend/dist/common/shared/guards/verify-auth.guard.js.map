{"version":3,"sources":["../../../../src/common/shared/guards/verify-auth.guard.ts"],"sourcesContent":["import {\n  CanActivate,\n  ExecutionContext,\n  Injectable,\n  Logger,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { EnvConfigService } from 'src/common/config/env/env-config.service';\nimport { RequestWithOTP } from '../interface/response';\n\n@Injectable()\nexport class OTPVerifyAuthGuard implements CanActivate {\n  private readonly logger = new Logger(OTPVerifyAuthGuard.name);\n\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly configService: EnvConfigService,\n  ) {}\n\n  async canActivate(context: ExecutionContext): Promise<boolean> {\n    const request = context.switchToHttp().getRequest<RequestWithOTP>();\n\n    const token = request.headers['authorization']?.split(' ')[1];\n\n    if (!token) {\n      throw new UnauthorizedException(\n        'No token provided. Please include a token in the Authorization header.',\n      );\n    }\n\n    try {\n      // Secret is fetched from the environment variable\n      const secret = this.configService.get('LOGIN_SECRET');\n\n      // Verify the token\n      const decoded = await this.jwtService.verifyAsync(token, { secret });\n\n      // Attach the user info to the request for further processing\n      request.user = decoded;\n      this.logger.log(`User ${decoded.email} is authenticated.`);\n\n      return true; // Return true when the token is valid\n    } catch (error) {\n      this.logger.error('Invalid token or token expired');\n      throw new UnauthorizedException('Invalid token or token expired.');\n    }\n  }\n}\n"],"names":["OTPVerifyAuthGuard","canActivate","context","request","switchToHttp","getRequest","token","headers","split","UnauthorizedException","secret","configService","get","decoded","jwtService","verifyAsync","user","logger","log","email","error","constructor","Logger","name"],"mappings":";;;;+BAYaA;;;eAAAA;;;wBANN;qBACoB;kCACM;;;;;;;;;;AAI1B,IAAA,AAAMA,qBAAN,MAAMA;IAQX,MAAMC,YAAYC,OAAyB,EAAoB;QAC7D,MAAMC,UAAUD,QAAQE,YAAY,GAAGC,UAAU;QAEjD,MAAMC,QAAQH,QAAQI,OAAO,CAAC,gBAAgB,EAAEC,MAAM,IAAI,CAAC,EAAE;QAE7D,IAAI,CAACF,OAAO;YACV,MAAM,IAAIG,6BAAqB,CAC7B;QAEJ;QAEA,IAAI;YACF,kDAAkD;YAClD,MAAMC,SAAS,IAAI,CAACC,aAAa,CAACC,GAAG,CAAC;YAEtC,mBAAmB;YACnB,MAAMC,UAAU,MAAM,IAAI,CAACC,UAAU,CAACC,WAAW,CAACT,OAAO;gBAAEI;YAAO;YAElE,6DAA6D;YAC7DP,QAAQa,IAAI,GAAGH;YACf,IAAI,CAACI,MAAM,CAACC,GAAG,CAAC,CAAC,KAAK,EAAEL,QAAQM,KAAK,CAAC,kBAAkB,CAAC;YAEzD,OAAO,MAAM,sCAAsC;QACrD,EAAE,OAAOC,OAAO;YACd,IAAI,CAACH,MAAM,CAACG,KAAK,CAAC;YAClB,MAAM,IAAIX,6BAAqB,CAAC;QAClC;IACF;IAhCAY,YACE,AAAiBP,UAAsB,EACvC,AAAiBH,aAA+B,CAChD;aAFiBG,aAAAA;aACAH,gBAAAA;aAJFM,SAAS,IAAIK,cAAM,CAACtB,mBAAmBuB,IAAI;IAKzD;AA8BL"}